#pragma kernel minMax
#pragma kernel compactActiveBlocks
#pragma kernel generateTriangles

#define B_DIM_X 8
#define B_DIM_Y 4
#define B_DIM_Z 4
#define B_DIM_SIZE B_DIM_X*B_DIM_Y*B_DIM_Z
#define WARP_SIZE 32

static const uint3 B_DIM = uint3(8, 4, 4);

int vecToIdx(int3 vec, uint3 stride) {
    uint3 clampedVec = clamp(vec, uint3(0, 0, 0), stride - uint3(1, 1, 1));
    return clampedVec.z*stride.x*stride.y + clampedVec.y*stride.x + clampedVec.x;
}

struct MinMaxPair {
  float min;
  float max;
};

int3 size;
int3 numBlocks;
RWStructuredBuffer<MinMaxPair> minMaxBuffer;

groupshared MinMaxPair sharedMinMaxBuffer[B_DIM_SIZE];

RWStructuredBuffer<float> voxelBuffer;

[numthreads(B_DIM_X, B_DIM_Y, B_DIM_Z)]
void minMax (
  uint3 gtid : SV_GroupThreadID,
  uint3 gid : SV_GroupID,
  uint gidx : SV_GroupIndex
)
{
    uint3 gridPos = gid * (B_DIM - int3(1, 1, 1)) + gtid;

  float val1 = voxelBuffer[vecToIdx(gridPos, size)];
  sharedMinMaxBuffer[gidx].min = val1;
  sharedMinMaxBuffer[gidx].max = val1;

  GroupMemoryBarrierWithGroupSync();
  for(uint i=B_DIM_SIZE/2; i > 0; i>>=1) {
    MinMaxPair pair1 = sharedMinMaxBuffer[gidx];
    MinMaxPair pair2 = sharedMinMaxBuffer[gidx+i];
    GroupMemoryBarrierWithGroupSync();
    if(gidx < i) {
      sharedMinMaxBuffer[gidx].min = min(pair1.min, pair2.min);
      sharedMinMaxBuffer[gidx].max = max(pair1.max, pair2.max);
    }
    GroupMemoryBarrierWithGroupSync();
  }

  if(gidx == 0) {
    minMaxBuffer[vecToIdx(gid, numBlocks)] = sharedMinMaxBuffer[gidx];
  }
}

extern float isoValue;
RWStructuredBuffer<uint> activeBlkNum;
RWStructuredBuffer<int> compactedBlkArray;
groupshared int sharedCompactedBlkArray[B_DIM_SIZE];

[numthreads(B_DIM_SIZE, 1, 1)]
void compactActiveBlocks(
  uint3 dtid : SV_DispatchThreadID,
  uint3 gid : SV_GroupID,
  uint gidx : SV_GroupIndex
)
{
    uint totalBlocks = numBlocks.x * numBlocks.y * numBlocks.z;
  uint maxValidGidx = (totalBlocks > (gid.x+1)*B_DIM_SIZE ? B_DIM_SIZE : totalBlocks - gid.x*B_DIM_SIZE) - 1;
  bool valid = gidx <= maxValidGidx;

  MinMaxPair pair = minMaxBuffer[dtid.x];
  bool active = pair.min < isoValue && pair.max > isoValue && valid;
  sharedCompactedBlkArray[gidx] = active;

  GroupMemoryBarrierWithGroupSync();

  for (uint offset = 1; offset < B_DIM_SIZE; offset <<= 1) {
    uint otherActive = sharedCompactedBlkArray[gidx-offset];
    GroupMemoryBarrierWithGroupSync();
    if (gidx >= offset) {
      sharedCompactedBlkArray[gidx] += otherActive;
    }
    GroupMemoryBarrierWithGroupSync();
  }

  uint index = sharedCompactedBlkArray[gidx];
  if (gidx == maxValidGidx) {
    InterlockedAdd(activeBlkNum[0], sharedCompactedBlkArray[gidx], sharedCompactedBlkArray[gidx]);
  }

  AllMemoryBarrierWithGroupSync();

  if (active) {
      compactedBlkArray[index + sharedCompactedBlkArray[maxValidGidx] - 1] = dtid.x;
  }
}

static const uint4 neighborMappingTable[12] = {
  uint4(0,0,0,0),
  uint4(1,0,0,1),
  uint4(0,1,0,0),
  uint4(0,0,0,1),
  uint4(0,0,1,0),
  uint4(1,0,1,1),
  uint4(0,1,1,0),
  uint4(0,0,1,1),
  uint4(0,0,0,2),
  uint4(1,0,0,2),
  uint4(1,1,0,2),
  uint4(0,1,0,2),
};

static const uint numTrisLookup[256] = {
0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,2,1,
2,2,3,2,3,3,4,2,3,3,4,3,4,4,3,1,
2,2,3,2,3,3,4,2,3,3,4,3,4,4,3,2,
3,3,2,3,4,4,3,3,4,4,3,4,5,5,2,1,
2,2,3,2,3,3,4,2,3,3,4,3,4,4,3,2,
3,3,4,3,4,4,5,3,4,4,5,4,5,5,4,2,
3,3,4,3,4,2,3,3,4,4,5,4,5,3,2,3,
4,4,3,4,5,3,2,4,5,5,4,5,2,4,1,1,
2,2,3,2,3,3,4,2,3,3,4,3,4,4,3,2,
3,3,4,3,4,4,5,3,2,4,3,4,3,5,2,2,
3,3,4,3,4,4,5,3,4,4,5,4,5,5,4,3,
4,4,3,4,5,5,4,4,3,5,2,5,4,2,1,2,
3,3,4,3,4,4,5,3,4,4,5,2,3,3,2,3,
4,4,5,4,5,5,2,4,3,5,4,3,2,4,1,3,
4,4,5,4,5,3,4,4,5,5,2,3,4,2,1,2,
3,3,2,3,4,2,1,3,2,4,1,2,1,1,0,
};

Buffer<int> marchingCubesEdgeTable;
RWStructuredBuffer<float3> vertexBuffer;
RWStructuredBuffer<float3> normalBuffer;
RWStructuredBuffer<int> indexBuffer;

RWBuffer<uint> globalVertexOffset;
RWBuffer<uint> globalIndexOffset;

groupshared float sharedVoxelBuffer[B_DIM_SIZE];
groupshared bool3 sharedXyzEdges[B_DIM_SIZE];
groupshared int numVerts[B_DIM_SIZE];
groupshared int numIndices[B_DIM_SIZE];

float3 calcNormalFor(uint3 val) {
  // do not divide by 2.0f here because the vector is normalized anyway
  float3 normal = float3(
    (voxelBuffer[vecToIdx(val + int3(1, 0, 0), size)] - voxelBuffer[vecToIdx(val - int3(1, 0, 0), size)]),
    (voxelBuffer[vecToIdx(val + int3(0, 1, 0), size)] - voxelBuffer[vecToIdx(val - int3(0, 1, 0), size)]),
    (voxelBuffer[vecToIdx(val + int3(0, 0, 1), size)] - voxelBuffer[vecToIdx(val - int3(0, 0, 1), size)])
  );
  if (length(normal) == 0) {
    return normal;
  } else {
    return normalize(normal);
  }
}

[numthreads(B_DIM_X, B_DIM_Y, B_DIM_Z)]
void generateTriangles(
  uint3 gid : SV_GroupID,
  uint gidx : SV_GroupIndex,
  uint3 gtid : SV_GroupThreadID
)
{
  uint3 blockPos = uint3(0, 0, 0);
  uint blkIdx = compactedBlkArray[gid.x];
  blockPos.x = blkIdx%numBlocks.x;
  blockPos.y = ((blkIdx-blockPos.x)/numBlocks.x)%numBlocks.y;
  blockPos.z = (((blkIdx-blockPos.x)/numBlocks.x)-blockPos.y)/numBlocks.y;

  uint3 gridPos = blockPos * (B_DIM - int3(1, 1, 1)) + gtid;

  float myVoxelValue = voxelBuffer[vecToIdx(gridPos, size)];
  sharedVoxelBuffer[gidx] = myVoxelValue;
  GroupMemoryBarrierWithGroupSync();
   
  float3 edgeVoxels = {
    sharedVoxelBuffer[vecToIdx(gtid + uint3(1, 0, 0), B_DIM)],
    sharedVoxelBuffer[vecToIdx(gtid + uint3(0, 1, 0), B_DIM)],
    sharedVoxelBuffer[vecToIdx(gtid + uint3(0, 0, 1), B_DIM)]
  };

  uint cubeCase = 0;
  cubeCase = (cubeCase<<1)|(sharedVoxelBuffer[vecToIdx(gtid + uint3(0, 1, 1), B_DIM)] < isoValue);
  cubeCase = (cubeCase<<1)|(sharedVoxelBuffer[vecToIdx(gtid + uint3(1, 1, 1), B_DIM)] < isoValue);
  cubeCase = (cubeCase<<1)|(sharedVoxelBuffer[vecToIdx(gtid + uint3(1, 0, 1), B_DIM)] < isoValue);
  cubeCase = (cubeCase<<1)|(edgeVoxels.z < isoValue);
  cubeCase = (cubeCase<<1)|(edgeVoxels.y < isoValue);
  cubeCase = (cubeCase<<1)|(sharedVoxelBuffer[vecToIdx(gtid + uint3(1, 1, 0), B_DIM)] < isoValue);
  cubeCase = (cubeCase<<1)|(edgeVoxels.x < isoValue);
  cubeCase = (cubeCase<<1)|(myVoxelValue < isoValue);

  uint myNumIndices = gtid.x < B_DIM_X - 1 && gtid.y < B_DIM_Y - 1 && gtid.z < B_DIM_Z - 1 ? numTrisLookup[cubeCase]*3 : 0;
  numIndices[gidx] = myNumIndices;

  bool3 myXyzEdges;
  if (myVoxelValue <= isoValue) {
    myXyzEdges = bool3(
      edgeVoxels.x > isoValue,
      edgeVoxels.y > isoValue,
      edgeVoxels.z > isoValue
    );
  } else {
    myXyzEdges = bool3(
      edgeVoxels.x <= isoValue,
      edgeVoxels.y <= isoValue,
      edgeVoxels.z <= isoValue
    );
  }
  sharedXyzEdges[gidx] = myXyzEdges;

  uint myNumVerts = myXyzEdges.x + myXyzEdges.y + myXyzEdges.z; 
  numVerts[gidx] = myNumVerts;

  GroupMemoryBarrierWithGroupSync();

  for (uint offset = 1; offset < B_DIM_SIZE; offset <<= 1) {
    int i = numIndices[gidx-offset];
    int v = numVerts[gidx-offset];
    GroupMemoryBarrierWithGroupSync();
    if (gidx >= offset) {
      numIndices[gidx] += i;
      numVerts[gidx] += v;
    }
    GroupMemoryBarrierWithGroupSync();
  }

  uint indicesOffset = numIndices[gidx];
  uint vertsOffset = numVerts[gidx];
  if (gidx == B_DIM_SIZE-1) {
    InterlockedAdd(globalIndexOffset[0], numIndices[gidx], numIndices[gidx]);
    InterlockedAdd(globalVertexOffset[0], numVerts[gidx], numVerts[gidx]);
  }

  AllMemoryBarrierWithGroupSync();

  uint sharedIndicesOffset = numIndices[B_DIM_SIZE-1];
  uint sharedVertsOffset = numVerts[B_DIM_SIZE-1];

  GroupMemoryBarrierWithGroupSync();

  numIndices[gidx] = indicesOffset + sharedIndicesOffset;
  numVerts[gidx] = vertsOffset + sharedVertsOffset - myNumVerts;
  GroupMemoryBarrierWithGroupSync();

  float3 myNormalVector = calcNormalFor(gridPos);
  uint vertexOffset = numVerts[gidx];
  if (myXyzEdges.x) {
    float3 xVoxel = gridPos;
    xVoxel.x += 1;
    float delta = edgeVoxels.x - myVoxelValue;
    float lerpFactor = (delta == 0.0f) ? isoValue : (isoValue - myVoxelValue) / delta;
    normalBuffer[vertexOffset] = -lerp(myNormalVector, calcNormalFor(xVoxel), lerpFactor);
    //vertexBuffer[vertexOffset] = lerp(gridPos, xVoxel, lerpFactor);
    vertexOffset++;
  }

  if (myXyzEdges.y) {
    float3 yVoxel = gridPos;
    yVoxel.y += 1;
    float delta = edgeVoxels.y - myVoxelValue;
    float lerpFactor = (delta == 0.0f) ? isoValue : (isoValue - myVoxelValue) / delta;
    normalBuffer[vertexOffset] = -lerp(myNormalVector, calcNormalFor(yVoxel), lerpFactor);
    //vertexBuffer[vertexOffset] = lerp(gridPos, yVoxel, lerpFactor);
    vertexOffset++;
  }

  if (myXyzEdges.z) {
    float3 zVoxel = gridPos;
    zVoxel.z += 1;
    float delta = edgeVoxels.z - myVoxelValue;
    float lerpFactor = (delta == 0.0f) ? isoValue : (isoValue - myVoxelValue) / delta;
    normalBuffer[vertexOffset] = -lerp(myNormalVector, calcNormalFor(zVoxel), lerpFactor);
    //vertexBuffer[vertexOffset] = lerp(gridPos, zVoxel, lerpFactor);
  }
  
  uint indexBufferBaseOffset = numIndices[gidx]-myNumIndices;
  vertexBuffer[indexBufferBaseOffset] = float3(numIndices[gidx], 1, 1);
  indexBuffer[indexBufferBaseOffset] = myNumIndices;
  return;
  for (uint indexOffset = 0; indexOffset < myNumIndices; indexOffset++) {
    uint4 edgeMap = neighborMappingTable[marchingCubesEdgeTable[cubeCase * 16 + indexOffset]];
    uint3 edgeCellOffset = gtid + edgeMap.xyz;
    uint edgeCellOffsetIdx = vecToIdx(edgeCellOffset, B_DIM);

    bool3 neighborXyzEdges = sharedXyzEdges[edgeCellOffsetIdx];
    uint edgeSum = 0;
    for(uint edgeIndex = 0; edgeIndex < edgeMap.w; edgeIndex++) {
      edgeSum += neighborXyzEdges[edgeIndex];
    }
    uint edgeVertexIndex = numVerts[edgeCellOffsetIdx]+edgeSum;
    indexBuffer[indexBufferBaseOffset+indexOffset] = edgeVertexIndex;
  }
}

